

Jenkins is a powerful application that allows continuous integration and continuous delivery of projects, regardless of the platform you are working on. It is a free source that can handle any kind of build or continuous integration. You can integrate Jenkins with a number of testing and deployment technologies. In this tutorial, we would explain how you can use Jenkins to build and test your software projects continuously.


******************************************************************************************************************************************************************************************
										About Jenkins
******************************************************************************************************************************************************************************************

it is devoloped by sun microsystem under the name  hudson in 2004 , later oracle made jenkin that is part of hudson open spurce and kept hudson as paid , later hudson was discontinued

jenkins requires JDK 1.5 or above

Jenkins is a software that allows continuous integration. Jenkins will be installed on a server where the central build will take place. The following flowchart demonstrates a very simple workflow of how Jenkins works. it is framework and has master slave architecture , it can be scheduled as per requirement like crone server , tasks can be labeled and accordingly lables can be assigned to any of slave so that it can perform that specific task only 

Alternatives :  altassian Bamboo ,Buildbot

CI :
	Continuous Integration is a development practice that requires developers to integrate code into a shared repository at regular intervals. This concept was meant to remove the problem of finding later occurrence of issues in the build lifecycle. Continuous integration requires the developers to have frequent builds. The common practice is that whenever a code commit occurs, a build should be triggered.

Plugins :
	a plug-in is a software component that adds a specific feature to an existing computer program. When a program supports plug-ins, it enables customization. Plugins are the primary 	means of enhancing the functionality of a Jenkins environment to suit organization- or user-specific needs. There are over a thousand different plugins which can be installed on a 	Jenkins controller and to integrate various build tools, cloud providers, analysis tools, and much more.

Artifact:
	used for archiving purpoes


Jenkins Working :


	pull code (using webhooks) --> build(like maven)  ---> test(selenium , junit) --> QA  --- > Deploy on production (if passes QA)





A Build is an attempt or process to compile all of the source code for the project into a set of executable binaries. We cannot able to access the source code directly but we can access the application in the form of builds.

An upstream job is a configured project that triggers a project as part of its execution. post build action is used .
if project b should build after project a then we need to configure project a in this case

A downstream job is a configured project that is triggered as part of a execution of pipeline. node project is active and continously reach the mentioned project to done its job
Build after other projects are built option is used
if project b should build after project a then we need to configure project b in this case

Upstream and downstream jobs help you to configure the sequence of execution for different operations and hence you can orchestrate the flow of execution. We can configure one or more projects as downstream jobs in Jenkins.



******************************************************************************************************************************************************************************************
									 Jenkins Setup
******************************************************************************************************************************************************************************************

Using Docker 

	docker pull jenkins/jenkins

	docker run -it -p 8080:8080 --name jenkins jenkins/jenkins            Or     docker run -it -p 8081:8080 --name jenkins jenkins/jenkins

install plugin Role-based Authorization Strategy to create and assign roles to users
1. change Logged-in users can do anything to Role-Based Strategy in manange jenkins -> configure global security -> authorization
2. create a role in manage jenkins -> manage and assign roles -> Global Roles -> Role to add
3. to create role based on field , create role in Item roles with pattern AS  e.g. for devolpoer use dev* , so user with starting name as dev will be assigned automatically
4. assign role to account




Master slave model:

	we can assign slave for master to help with master , slave has its own system to perform

	every job has a label and also slave has lable , if label matches then only that slave is going to build this job otherwise anyone of this get assigned

	in "Restrict where this project can be run" option from configure job , set label of node to dedicatedly attach node to that job



















					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------

					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------
					---------------------------------------------------------------------------
					|           		docker images					   |
					---------------------------------------------------------------------------
