


******************************************************************************************************************************************************************************************
										About Chef
******************************************************************************************************************************************************************************************

//* Important Terms  *//

*Infrastructure as code (IAC) simply means that managing infrastructure by writing code (Automating infrastructure) rather than using manual processes. It can also be termed asprogrammable 		infrastructure.	
*Idempotence means that applying an operation once or applying it multiple times has the same effect. Examples: Multiplication by zero , 
	in chef , client only pulls code or part of code that is not on node instead getting everything from start
*convergance is process where chef client pulls only necessary changes to get in desired state as mentioned in recipe , achieve using chef-client -zr
*Run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is a ordered list of roles and/or recipes that are run in the exact 	order 		defined in the run-list; if a recipe appears more than once in the run-list, Chef Infra Client will not run it twice 
	processed as , chef-client -zr followed by multiple pairs of  "[cookbook::recipe]" , only limit is 1 recipe from 1 cookbook

	
	-Chef is a tool used for Configuration Management and is closely competing with Puppet ,developed by Opscode 
	-Chef is an automation tool that provides a way to define infrastructure as code. Chef uses a pure-Ruby, domain-specific language (DSL) for writing system configurations. Below are 		the types of automation done by Chef, irrespective of the size of infrastructure:
			.Infrastructure configuration
			.Application deployment 
			.Configurations are managed across your network
	-Like Puppet which has a Master-Slave architecture even Chef has a Client-Server architecture. But Chef has an extra component called Workstation
	-chef is made using  Ruby and Erlang , Recipes is written in Ruby
	- user writes "recipes" that describe how Chef manages server applications and utilities (such as Apache HTTP Server, MySQL, or Hadoop) and how they are to be configured
	- recipes (set of recipes iscookbook) describe a series of resources that should be in a particular state ,various resources can be configured to specific versions of software to 		   run and can ensure that software is installed in the correct order based on dependencies ,Chef makes sure each resource is properly configured and corrects any resources 				that are not in the desired state

		Key Components of a Cookbook (helps to create a system at node ) , all below are dir's except metadata which is ruby file

			Recipes  => contains code which tells about which file and package is to create/modify
			Metadata(metadata.rb) => This file contains information about the cookbook such as the cookbook name, description, and version.
			Attributes  => key-value pair , key stores in ohai and used by files , server can update value for key and so client updates correspondingly
			Resources => abstract approach for defining a set of actions and (for each action) a set of properties and validation parameters.
			Templates =>  template is a file written in markup language that uses Ruby statements to solve complex configuration scenarios.
			Libraries => library allows the use of arbitrary Ruby code in a cookbook, either as a way to extend the Chef Infra Client language or to implement a new class.
			Files =>  resource that tells a cookbook how to distribute files, including by node, by platform, or by file version.
			ohai => Custom Ohai plugins can be written to load additional information about your nodes to be used in recipes. This requires Chef Infra Server 12.18.14 or later.
	
	- it only updates if node client founds that server has diff. config , if only 1 char is changed it only pulls that change not the whole file


	Types of Attributes :   (priority increases in order , automatic has highest , attributes can be defined in node , cookbook , role , env)
	

		1] default  : default attribute is automatically reset at the start of every Chef Infra Client run 
		2] force_default : ensure that an attribute defined in a cookbook (by an attribute file/recipe) takes precedence over a default attribute ,set by a role or an environment
		3] normal  : normal attribute is a setting that persists in the node object , higher precedance than default
		4] override :  automatically reset at the start of every Chef Infra Client run , most often specified in a recipe but can be in  attribute file/role, and/or for environment
		5] force_override : force_override attribute to ensure that an attribute defined in a cookbook takes precedence over an override
		6] automatic : contains data that is identified by Ohai at the beginning of every Chef Infra Client run. An automatic attribute cannot be modified

//* Chef Architecture  *// 

	contain 3 parts   1] Nodes   2] chef server   3]  Workstation 

		-/ Nodes : Slave servers that needs to be configured by chef server , chef client and ohai(like database) is installed here.
	
			* Ohai is a tool for collecting system configuration data, which it then provides to Chef Infra Client to use in cookbooks
			* Chef Infra Client is an agent that runs locally on every node that is under management by Chef Infra Server. When Chef Infra Client runs, it performs all of the 				steps required for bringing a node into the expected state , it does following
					.Registering and authenticating the node with Chef Infra Server
					.Synchronizing cookbooks from the Chef Infra Server to the node
					.Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies
					.Taking the appropriate and required actions to configure the node based on recipes and attributes
					.Reporting summary information on the run to Chef Automate
			* Knife is a command-line tool that provides an interface between a local chef-repo and the Chef Infra Server , it manage Nodes , Cookbooks and recipes ,Roles, 				Environments, and Data Bags , uses it for uploading cookbooks and managing other aspects of Chef.

		-/ chef server :  Cookbook is stored here , can be local or remote , knife is used to communicate with nodes

		-/ Workstation : Actual cookbook/set of codes is written and tested here , knife is used to push code to server

				Supermarket : contains configuration pre-written/cookbook codes

	- bootstrap is process of connecting nodes to server

	/* Chef Modes :

			1.  In client/server mode, the Chef client sends various attributes about the node to the Chef server. The server uses Elasticsearch to index these attributes and 				provides an API for clients to query this information. Chef recipes can query these attributes and use the resulting data to help configure the node.
			2. chef-solo , runs locally and allows to provision guest machines using Chef cookbooks without the complication of any Chef client and server configuration. It 				helps to execute cookbooks on a self-created server




			///  Chef Architecture 

													     recipe1
								CHEF Workstation ---> configured N cookbooks -> recipe2
									|				     recipeN
									|
								  CHEF Server Infra   --- > cookbook Stored 
									|				     
									|
								      NODES -----> CHef client  (pull config from server)   
											|
										     ohai Database (contains all system config and files about node)

						*all 3 above can be installed and used in 1 computer directly for testing



			/// Cookbook Architecture  (cookbooks are stored in chef-repo/cookbooks folder of workstation for bootstrap )

			After creating Cookbook , following files will be created inside dir named as cookbook name :

				CHANGELOG.md      ==> This file is used to list changes made in each version of the  cookbook.
				LICENSE        
				README.md
				chefignore        ==>  Put files/directories that should be ignored in file when uploading
				metadata.rb       ==> conatins info about cookbook  
				recipes           ==> contains by default 1 recipe named as "default.rb" , user can create new recipe with new name
				kitchen.yml       ==> This file is used to list changes made in each version of the 2newcook cookbook.
				Policyfile.rb     ==>  Describe how you want Chef Infra Client to build your system.
				test              ==>    dir conating ruby file has Chef InSpec test for recipe 



				ONE COOKBOOK --->   multiple recipe 
									* recipe can call another recipes from "same cookbook"  

				To include recipe in another recipe use:  ' include_recipe "COOKBOOK::RECIPE" '   , for multiple use same with newline




******************************************************************************************************************************************************************************************
										install and using Chef locally
******************************************************************************************************************************************************************************************


For RED HAT linux distros :

	-Get download workstation url from web , create new working dir 
	
	-use command : wget URL    ---- it will download rpm(redhat package manager) file

	-install RPM package : yum install ch* -y           --- installing chef workstation

	-check installation : which chef    OR chef -v

	-create new dir for storing cookbooks , cd to this dir

	-Creating CookBook

		chef generate cookbook COOKBOOK_NAME    ---it will generate dir named COOKBOOK_NAME which contains files => 1.chefignore   2.LICENSE    3.Policyfile.rb  4.recipes
			*tip : use tree package to better visulize the file structure

	-Creating Recipes (needs current dir to COOKBOOK_NAME always ) 
					---------------------------------------------------------------------------
					|          chef generate recipe RECIPE_NAME				   |       --- only inside cookbook dir
					---------------------------------------------------------------------------

							      --- it will generate ruby(.rb) file named as RECIPE_NAME inside COOKBOOK_NAME/recipes 

	
					---------------------------------------------------------------------------
					|           ***      Modify the Recipe  **				   |
					---------------------------------------------------------------------------


		open created recipe in vi editior : 
	
					vi COOKBOOK_NAME/recipes/RECIPE_NAME.rb     ---it is ruby file use .rb always

		after opening it is alreadt written with cookbook and recipe name with copyright notice, if not it is error

		below copyright type :	    ***without any # and with newline for every line	
						*** dont add space after :  , e.g. action :create  OR action :install

					---------------------------------------------------------------------------
					|	               Code syntax For Recipe				  |
					---------------------------------------------------------------------------
					|	 For creating and inserting in file  (with filname as myfile)	  |
					---------------------------------------------------------------------------

		    
			
								file '/myfile' do
								content 'Welcome to chef'
								action :create
								owner 'root'
								group 'root'
								end

						in simple way   :    file "filename"

					---------------------------------------------------------------------------
					|	      Using Attributes						  |
					---------------------------------------------------------------------------
			
			 (no space before : if it is in " " and no space after : if outside " ")
					
		**here contant of file contain vaiable values set using attributes , it will take values directly from node ohai 

					file '/basicinfo' do
 					content "This is to get Attributes
					 HOSTNAME: #{node['hostname']}
					 IPADDRESS: #{node['ipaddress']}
					 CPU: #{node['cpu']['0']['mhz']}
					 MEMORY: #{node['memory']['total']}"
					 owner 'root'
					 group 'root'
					action :create
					end



										Default attribute in node object in recipe
											node.default['apache']['dir'] = '/etc/apache2'

										Normal attribute set in a recipe
											node.normal['apache']['dir'] = '/etc/apache2'

										Override attribute in a node object (from a recipe)
											node.override['apache']['dir'] = '/etc/apache2'



					---------------------------------------------------------------------------
					|	                installing package				  |
					---------------------------------------------------------------------------

		                                    e.g.  (httpd package)

	
						package 'tree' do
						action :install
						end

install multiple packages

%w(PACKGE_NAME1 PACKGE_NAME2 PACKGE_NAME3 PACKGE_NAME4) .each do |p|
package p do
action :install 
end 
end
					---------------------------------------------------------------------------
					|	                    performing Action on package		  |
					---------------------------------------------------------------------------

		    For   (e.g. running httpd server)

			service 'httpd' do
			action [:enable, :start]
			end


					---------------------------------------------------------------------------
					|		using direct linux commands				  |   Runs command every time when recipe is called
					---------------------------------------------------------------------------
			Write command in between EOH

	  
execute  "run a script" do
command <<-EOH
mkdir /rahul
touch /file
echo "content" >> file
EOH
end


					---------------------------------------------------------------------------
					|		Create user and group   				  |   
					---------------------------------------------------------------------------
				Password is in hashed format  , group should be created first if user want to add in group

CREATE GROUP 
			
group "GROUPNAME" do
gid  INT/CHAR  
action :craete
end 

CREATE USER   (simple method  :     "	user "USERNAME"	")

user 'USERNAME' do
  comment 'A random user'
  uid 1234
  gid 'groupname'
  password '$1$JJsvHslasdfjVEroftprNn4JHtDi'
action :ACTIONS
end


 			for user : ACTIONS can be done : 1. create  2. modify   3.  lock  4. remove  5.  lock   6.  unlock


ADD USER IN GROUP  (if append != true causes override of group members)

group "GRPNAME" do
action :create
member 'USER1'
append true
end

	-Execute the written code :

		  Checking syntax
					---------------------------------------------------------------------------
					|	    chef exec ruby -c  COOKBOOK_NAME/recipes/RECIPE_NAME.rb	   |
					---------------------------------------------------------------------------
			     												--if no error , it will ouput as "Syntax OK"

		  Running :
Always					---------------------------------------------------------------------------
PWD = ../cookbookname			|	chef-client -zr "recipe[COOKBOOK_NAME::RECIPE_NAME]" 		   |    IF recipe name is not given , default.rb will be considered 
					---------------------------------------------------------------------------
			    							---e.g.  chef-client -zr "recipe[testrahul::reciperahul]" , it will give execued lines in green color



					-z, --local-mode                           : Run the Chef Infra Client in local mode
					-r OR --runlist RUN_LIST_ITEM              : Permanently replace the current run-list with the specified run-list items.
					-o  OR --override-runlist RUN_LIST_ITEM    : not clear the list of cookbooks (and related files) that is cached on the node.

			For more detils ,      " https://docs.chef.io/ctl_chef_client/#options  "

		TO RUN MULTIPLE RECIPE :

			steps :
				 if from 1 cookbook , muliple recipe are to be run then link all to the default and run default
				OR
				 Run without any extra space in between  
						chef-client -zr "recipe[C1::default],recipe[C2::recipe_another],recipe[C3::default]" 



		  check run :
			see if files/package is created or modified according to config in rb file

		  recheck :
			if we run that recipe again , this time it will only outputs uptodate not overwritten as file is not modified so far

	-to get info about ohai 
	
		type : ohai     ---to get all config about ohai

		OR  ohai NAME    --- it will display only about NAME . e.g. ohai hostname , ohai memory , ohai cpu
	
		OR   to get only specific info use : ohai NAME/INDEX      --- e.g ohai memory/total , ohai memory/cached , ohai cpu/0/mhz

			 




******************************************************************************************************************************************************************************************
										 Bootstraping
******************************************************************************************************************************************************************************************



create organization at chef.io and download its starter kit for organization  , get it in linux system using WinSCP nmaed as chef-repo

To check Auth : in chef-repo/config.rb  , check chef_server_url    OR just type knife ssl check

Launch New instance for node with configuration as       #!/bin/bash   ,  sudo su  , yum update -y   

save the node's pem file in chef-repo of workstation , and get the private ip of node

change dir to chef-repo and type following command

			knife bootstrap PRIAVTE_IP --ssh-user ec2-user --sudo -i PEM_KEYFILE_NAME -N NAME_FOR_NODE

check node is connected or not using :   
					chef node list

Move all the cookbooks to chef-repo/cookbooks

to upload cookbook to server(chef.io) use , 
			
			knife cookbook upload COOKBOOK_NAME         ----COOKBOOK_NAME should be in chef-repo/cookbook (it is uploaded on policies on chef.io)

to get available cookbooks that are uploaded use ,
			
			 knife cookbook list

set cookbook and recipe for a node using , 

				knife node run_list set NODE_NAME "recipe[COOKBOOK::RECIPE_NAME]"  , check on server node/runlist on chef.io

get su access of node and run :  chef-client     ---- it pull its pre-setted recipe by workstation and get in the state mentioned in recipe
							if recipe is updated then upload it again and then run chef-client again on node

to automate client process , do :
				 open etc/crontab and append line  :    * * * * * root chef-client  
									---- single space between every char  , it will run this cmd in every minute
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed


To make automated process without accessing instance :

	luanch instace with advance ci=onfiguration setting and add following command

#!/bin/bash
sudo su
yum update -y
echo "* * * * * root chef-client" >> /etc/crontab

	in workstaion , add node with private ip and pe file using knife bootstrap , set node for cookbook::recipe using knife node run_list

To delete cookbook from server: (command is same for node , cookbook from upload,delete)

			knife cookbook delete COOKBOOK_NAME


To delete node from server:

			knife node delete NODE_NAME    ---also delete client as chef makes nodes as clients automatically (knide client delete NODE_NAME )




    			///  Using Role for node (instead of directly attaching recipe , attach role for use it efficiently and lower the overhead)
			     **just diff. is attach role instead of recipe to node using runlist so that in future we have to just update role , it saves from rum runlist everytime on node


	Create a Role :

			cd to chef-Repo/Role                     --- there will be starter.rb
		
			create a role and open it using nano/vi like       nano ROLE_NAME.rb  and add follwing line

name "ROOL_NAME"
discription "ANYTHING"
run_list "recipe[COOK::RECIPE],recipe[C2::recipe_another]"

*** run_list "recipe[COOK]"        < ==  set all recipes inside cookbook COOK to role

	get back to chef-repo to upload role to server:

					knife role from file roles/ROLE_ANME.rb                 ----use knife role list  to confirm available roles on server

	connect the nodes to server using knife bootstrap  , it will craete client

	attach the role to node available on server using : knife node run_list set NODE_NAME "role[ROLE_NAME]"        ----run everytime for every node

	it will fetch the recipes mentioned in cookbook eveytime running chef-client command

	everytime when recipe is newly added , first upload cookbook and then edit the role and upload the role , if recipe is only modified just upload cookbook 

	

					
 



















	




