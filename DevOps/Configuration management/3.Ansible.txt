

-Ansible was introduced in 2012 by AnsibleWorks, is now owned by Red Hat,  it is an open-source and also has an enterprise version (Ansible Tower).

-ansible is terminolgy used as make communaicaation without delay between 2 devices which is on diff planet

-chef and puppet are more popular than ansible , also ansible community is not grown as much now
-chef has cookbook -> recipe but ansible has playbook

-Ansible is agenteless , agent has not installed on node , it directly communicates through ssh directly

-it was designed In Python (not Ruby) and is meant to be lightweight and have fast deployment

-Ansible uses the playbook to describe automation jobs, and playbook, which uses simple language, i.e., YAML. YAML is a human-readable data serialization language & commonly used for 	configuration files

-Ansible was a command-line-only tool. Now you can get a UI if you use the enterprise version, but itâ€™s by no means perfect

-it is Push Based Configuration Management Tool

-technically not fully automate as we need to push for configuration

-It can easily connect to clients using SSH-Keys, simplifying though the whole process. Client details, such as hostnames or IP addresses and SSH ports, are stored in the files, which are 		called inventory files. If you created an inventory file and populated it, then Ansible can use it.


 --------------------- Terms

Ansible Server			It is a machine where Ansible is installed and from which all tasks and playbooks will be executed.
Modules				The module is a command or set of similar commands which is executed on the client-side.
Task				A task is a section which consists of a single procedure to be completed.
Role				It is a way of organizing tasks and related files to be later called in a playbook.
Fact				The information fetched from the client system from the global variables with the gather facts operation.
Inventory			A file containing the data regarding the Ansible client-server.
Play				It is the execution of the playbook.
Handler				The task is called only if a notifier is present.
Notifier			The section attributed to a task which calls a handler if the output is changed.
Tag				It is a name set to a task that can be used later on to issue just that specific task or group of jobs.



			////////////////////       Ansible Use commands and configuration    ///////////////////////



- install ansible , python ,pip , openssl , git , python-level 

- open /etc/ansible/hosts in any editor like vi , nano and create group with nodes like e.g.

[GRP_NAME]
PRIVATE_NODE_IP

		add as many node with private ip , we can push configuration to group and it will be send to all available nodes

- open /etc/ansible/ansible.cfg in any editor and uncomment(remove #) lines having inventory  , sudo_user

- craete user having root access so that it can communicate with nodes without switching directly to root and nodes can execute cmd with that sudo user access 

	useradd USER      --create user directly

	passwd USER	  --- set password for user 

	sudo adduser USER sudo  OR   visudo         ---run with root access only , used to set sudo access ,add the lines as :

				USER ALL=(ALL) NOPASSWD: ALL

	create new root user in all nodes as well as server , with that access , USER can perform root operations with using sudo 

- switch to USER created in server and all nodes 

- in server , open /etc/ssh/sshd_config in editor and perform :

						1. uncomment PermitRootLogin 
						2. change PasswordAuthentication to yes

- restart ssh service in server as well as node 

- switch to USER , then we can ssh access of nodes from server but require password everytime

- to get access without password , rsa is used where servers public key is saved on all node and whenever server tries to access , it tries with its own private key and node will verify 	with public key so trust reletion will be build , follow steps :
		
			1. switch to USER , and type ssh-keygen   in server
			2. to copy server's punlic key on node , type    ssh-copy-id USER@NODE_PRIVATE_ID         ----USER is sudo user name of node 

- to list availble ALL nodes 

		ansible all --list-hosts

- to list availble in GROUP nodes 

		ansible GRP_NAME --list-hosts

- to list availble in GROUP nodes index wise --- indexing same as list indexing in python , starts from 0 and last has index -1 also slicing is possible

		ansible GRP_NAME[0] --list-hosts




                                      ////////////////////  Ansible ad hoc and playbooks        /////// (-a used whenever a command has to be pass to nodes)


	1. AD HOC COMMANDS (ad hoc typically signifies a solution for a specific purpose, problem, or task rather than a generalized solution adaptable to collateral instances.)

				Ad hoc commands are commands which can be run individually to perform quick functions. These commands need not be performed later.

				For example, you have to reboot all your company servers , instead writing whole playbook for writing for just one singal task
	
				it is not used for configuration management/deployment but it can be , it is for only individual commands , it is one time use 

				it used for works like start , reboot , shut down , create file , install on all/specific at once 

				basic linux commands are executed  , no idempotency

	Use of ad hoc commands (-a is used if it is ad hoc command) (switch to USER created in server and all the nodes)

				ansible USER_GROUP -ba "COMMAND"      -----  -a stands for argument means run the arg in "" and b is for make it as sudo 
									USER_GROUP may be all or created in /etc/ansible/hosts , instead of -b add sudo in the COMMAND directly
								COMMAND e.g. :  touch , ls , install httpd (not recommended)

			
						e.g. ansible grp[1:5] -a "sudo yum install httpd"  OR ansible all -ba "yum install httpd"



	2. Ansible Module and Playbook (idempotency is present)

		whenever module/playbook is fired , setup (like ohai) from server checks the configuration from all nodes and then decides to install if it is not present
			to get setup info abount nodes : ansible demo -m setup 
				to filter use :   ansible -m setup -a "filter=*ipv4*"    ---it will give only setup details about ipv4

		module is like recipe and playbook is like cookbook from chef  

		Ansible modules are discrete units of code which can be used from the command line or in a playbook task 

		Module :   always contain -m , MODULE_NAME is not discrete , it is according to purpoes like for installing yum , user releted cmd it is user 

				ansible GROUP_NAME -b -m MODULE_NAME -a "COMMAND"          -----COMMAND is not like linux commands , it is in form of YAML scripts


				e.g. for installing packge

						ansible all -b -m yum -a "pkg=httpd state=present"     ---pkg can br anything

							Yaml format=	state is present by default, present means install , absent means remove package , latest means update package

				e.g. for strating service

						ansible all -b -m service -a "name=httpd state=started"

				e.g. user releted , e.g. creating a user

						ansible all -b -m user -a "name=NAME"         ----to remove use ("name=NAME state=absent")

				e.g. copy files to nodes 

						ansible all -b -m copy -a "src=/DIR dest=/DIR" 

		Playbooks are the files where the Ansible code is written. Playbooks are written in YAML format ,Playbooks contain the steps which the user wants to execute on a particular 		machine. And playbooks are run sequentially. Playbooks are the building blocks for all the use cases of Ansible

	Playbook consists of :

		1.Role

		2.Handler  : performed only when task notofies true condition used to handle the services like start/reboot the servers	

		3.Task	  : tasks are defined here such as install package , copy files 			

		4.Role

		5.Var  : define the variables which you can use in your playbook. Usage is similar to variables in any programming language.can be used many times once defined 

		6.Files

		7.Name	 :   It specifies the name of the Ansible Playbooks.	


ansible-lint verify-apache.yml
			To check  playbook syntax and what is it's working without actual working on nodes

					---------------------------------------------------------------------------
					|           	 ansible-lint FILE_NAME.yml	  			   |  Alternative:  ansible-playbook FILE_NAME.yml --check
					---------------------------------------------------------------------------

			To execute any playbook

					---------------------------------------------------------------------------
					|           	  ansible-playbook FILE_NAME.yml			   |
					---------------------------------------------------------------------------

			create encrypted playbook

					---------------------------------------------------------------------------
					|           	  ansible-vault create FILE_NAME.yml			   |   ---enter key for as password for this yam file
					---------------------------------------------------------------------------

			To edit encrypted playbook

					---------------------------------------------------------------------------
					|           	  ansible-vault edit FILE_NAME.yml			   |   ---only accessible after entering successful key
					---------------------------------------------------------------------------


			To change password of encrypted playbook

					---------------------------------------------------------------------------
					|           	 ansible-vault rekey FILE_NAME.yml			   |
					---------------------------------------------------------------------------


		to encrpt exisitng yml file :     ansible-vault encrypt FILE.yml     ---- file should be decrypted

		to decrypt file :  ansible decrypt FILE.yml    ---- file should be pre-encrypted


	YAML Basic Format :

			alwasys start with --- and ends with ...  , ... is not mandatory , .yml format and it is case sensitive , like python it has indentation 
			
			it has key-value pairs strictly written as key: value  --- not space betn "key" and ":" but a single space betn ":" and value

			supports single line comments with # like python , no multi line comment supprted

E.G.

###   Syntax  ###

# start with --- and end with ...

# identifier key after main header always has sign -  , like e.g.
# tasks:                            -------headers can be tasks, handlers, vars , etc.
#   - name:ANYTHING                   ------- "-" is used only for identifier key after main headers , evry name in tasks has "-" sign

#  host , user , become ,connection is mandetory for every playbook but remote_user also can be used 



#####################   gather facts from setup      #####################

---
   hosts: GRP_NAME
   user: USER         # inour case it is ansible , it can be root
# in this case USER is ansible 
   become: yes
   connection: ssh
   gather_facts: yes  # to display facts from setup

...

#####################   Install a package using action     #####################

---
- hosts: GRP_NAME        # use - for first heading
  user: ansible
  become: yes
  connection: ssh
  tasks:
    - name: TEXT_THAT_DESCRIBES_FOLLOWING_PROCESS
      action: yum name=httpd state=present    #state may be installed


#####################   Install a package and configure          #####################

---
- name: Update web servers
  hosts: webservers
  remote_user: root

  tasks:
  - name: Ensure apache is at the latest version
    ansible.builtin.yum:
      name: httpd
      state: latest
  - name: Write the apache config file
    ansible.builtin.template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf

#####################   Install a package and start only if installed using handlers     #####################

---
- hosts: GRP_NAME        # use - for first heading
  user: ansible
  become: yes
  connection: ssh

  target :
    - name: TEXT_THAT_DESCRIBES_FOLLOWING_PROCESS
      action: yum name=httpd state=present    
      notify: restart httpd     # we can use anything but mention same test for name of handler

  handlers:
    - name: restart httpd      # same name as notify , it will be executed only if any task notifies it
      action: service name=httpd state=restarted


#####################   Install a package with variable         #####################


---
- hosts: GRP_NAME        # use - for first heading
  user: ansible
  become: yes

  vars:
    package: httpd   # simple variable
    region:        # multiple values for 1 variable
      - northeast
      - southeast
      - midwest
    foo:            # dictionary variables
      field1: one
      field2: two

  tasks:
    - name: TEXT_THAT_DESCRIBES_FOLLOWING_PROCESS
      action: 
        - yum name="{{package}}" state=present    #state may be installed
        - echo '"{{ region[0] }}" is the best region' >> /tmp/region.txt
        - echo '"{{ foo.field1 }}" is same as "{{ foo['field1'] }}"' >> /tmp/region.txt


#####################   Install a package with loop         #####################
#   Dont use action for loop , use specific task name

---
- hosts: GRP_NAME        # use - for first heading
  user: ansible
  become: yes

  vars:
    list_of_packages: httpd

  tasks:  
# - name will be executed until loop values are exhausted , no integers are  defined for loops
    - name: Add several users
      ansible.builtin.user:
        name: "{{ item.name }}"    # item is by default used for calling values of loop
        state: present
        groups: "{{ item.groups }}"
      loop:
        - { name: 'testuser1', groups: 'wheel' }
        - { name: 'testuser2', groups: 'root' }

    - name: Optimal yum
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      loop: 
        - httpd
        - nginx

    - name: creating users with loop
      user: name="{{ item }}" state=present
      with_items:         # using with items instead of loop
        - user1   # only single letter allowed , like user1 allowed but user 1 will throw error
        - user2
    
							
#############  Using When Condition  #############

---
- hosts: GRP_NAME        # use - for first heading
  user: ansible
  become: yes
  connection: ssh
  tasks:
    - name: TEXT_THAT_DESCRIBES_FOLLOWING_PROCESS
      action: yum name=httpd state=present   
      when: ansible_os_family == 'RedHat'
    - name: TEXT_THAT_DESCRIBES_FOLLOWING_PROCESS
      command: apt-get install apache2 -y
      when: ansible_os_family == 'Debian'



******************************************************************************************************************************************************************************************

		Playbook Using Roles

		
			Create Tasks as 
		
						mkdir -p playbook/roles/ROLE_NAME/tasks            ---- -p for for creating nested directories


						also with tasks make sepeate dir's like handlers , vars inside playbook/roles/ROLE_NAME/

	
			create yml file only for specific purpoes , like tasks contain only tasks for ROLE_NAME

					touch playbook/roles/ROLE_NAME/tasks/main.yml        ---- main list of tasks that the role executes.

			for vars       touch playbook/roles/ROLE_NAME/vars/main.yml


		Create master yml file to run this roles

					touch  playbook/master.yml              ---- it contains target and role          


---
- hosts: GRP_NAME        # For master.yml file
  user: ansible
  become: yes
  connection: ssh
  roles:
    - roles: webserver    #  we created webserver dir as ROLE_NAME



When master.yml is called , it will execute the role webserver so that in every dir inside ROLE_NAME , it run every main.yml available i.e. from tasks , vars , handlers etc.



