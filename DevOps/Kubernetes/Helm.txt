                                                     _   _          _       __  __ 
                                                    | | | |   ___  | |     |  \/  |
                                                    | |_| |  / _ \ | |     | |\/| |
                                                    |  _  | |  __/ | |___  | |  | |
                                                    |_| |_|  \___| |_____| |_|  |_|
                                                                        

Package manager : collection of software tools that automates process of installing , upgrading , configuring and removing computer programs for a computer

HELM : can be stated as IAC to manage infrastructure in the cluster 

        About Helm : 

            Helm is a tool that streamlines installing and managing Kubernetes applications.
            Think of it like Apt/Yum/Homebrew for K8S. Helm uses a packaging format called charts. 
            A chart is a collection of files/manifest that describe a related set of Kubernetes resources.
            remote repo of helm is known as helmhub (Now artifacthub)
            A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.
            it is written/designed in Go .

            Helm is made of two components: 
                the CLI binary named helm that allows you to perform communication with a remote component named tiller  
                tiller lives inside your Kubernetes cluster that is responsible to perform patches and changes to resources you ask to manage

            Helm 3 has a client-only(single-service) architecture with the client still called helm .
            only one executable is rewsponcible for implementing helm .
            in-cluster-Tiller(server) is now removed which is in helm2 , also it was risky to use 

            in short , we make template and in the time of deployment , we need only to fill values like how many replicas etc. as per the requirement. 
            we can set a variable and at the time of deployment we can define a value , some values can be hardcoded
            e.g.   replicas: 3    # hard-coded    
            
                or      
                    replicas: {{ values.replicacount }}   
                        # dynamic , in values file , there is variable named replicacount having some value


                        ------     Helm   Objects    ------

                Chart 

                    They are simply combined yaml manifest into single package that can be installed on Kubernetes cluster.

                    contains resource defination necessary to run an application , tool or service inside k8s cluster



                Release

                    it is an instance of chart that is get created every time a chart is installed on cluster.
                    using release , with can be used to manage the chart. so that we can rollback to previous version of charts easily.


                Repository

                    location where helm stores the charts. we can share charts with other people.




        Helm commands :

        helm repo     

            helm repo list      => list all the repos available locally

            helm list          => see installed charts

            helm repo add [NAME] [URL] [flags]        =>  download repo locally from server
                                        e.g.  helm repo add stable https://charts.helm.sh/stable  # add stable repo
                                        Or    helm repo add bitnami https://charts.bitnami.com/bitnami  # add bitnami repo

            helm repo remove [NAME]             =>  remove the repo from locally

            helm search repo [NAME] [flags]          =>  search for charts in the local repos

                    Show is used to view details before installing.
            
            helm show values [NAME]           =>  show the values of the chart before applying it

            helm show all [NAME]           =>  show the all the details of the chart before applying it

            helm show chart [NAME]           =>  show the chart details 


            helm create [NAME]            => create a new chart with the given name

                after creating a new chart , we get dir named as NAME and file structure as shown below

                   [NAME]
                    ├── charts
                    ├── Chart.yaml    => we can edit this file to change the values that to be applied on the chart
                    ├── templates       => with values.yaml will generate valid manifest file for k8s
                    │   ├── deployment.yaml
                    │   ├── _helpers.tpl
                    │   ├── hpa.yaml
                    │   ├── ingress.yaml
                    │   ├── NOTES.txt
                    │   ├── serviceaccount.yaml
                    │   ├── service.yaml
                    │   └── tests
                    │       └── test-connection.yaml
                    └── values.yaml          =>  default configuration values for this chart

            helm install [NAME] REPO_NAME/[PKG_NAME]        =>  This command installs a chart archive/release
                                                                creates deploy named as NAME-PKG_NAME

            helm install --dry-run [NAME] REPO_NAME/[PKG_NAME]        =>  we can see installation steps 
                                                                        without actually installing the chart ,simulate an install

            helm install --timeout 20s [NAME] REPO_NAME/[PKG_NAME]        => time to wait for any individual Kubernetes operation 
                                                                        (like Jobs for hooks) (default 5m0s)

            helm install [NAME] REPO_NAME/[PKG_NAME] --set VARIABLE=VALUE         =>  Set value to variable imperatively

                                        e.g. helm install --set replicas=3 myapp myrepo/mychart

            helm install REPO_NAME/[PKG_NAME] .         =>  after pulling install chart with Values.yaml file

                                        e.g. helm install myapp . 

                    Get is used to view details  After installing.
  
            
            helm get values [NAME]           =>  get the user defined values (using --set or file )of the chart after applying it
            
            helm get manifest [NAME]           =>  get the manifest of the chart that is applied

            helm status [NAME]        =>  show the status of the release

            helm uninstall [NAME]         =>  This command uninstalls a chart archive/release 
                                                Also ( helm delete [NAME] )        can be used

            helm history [NAME]        =>  show the history of the releases of that chart [NAME]

            helm upgrade [NAME] REPO_NAME/[PKG_NAME] [flags]        =>  This command upgrades a chart archive/release

            helm pull REPO_NAME/[PKG_NAME] [flags]        =>  This command pulls/downloads a chart in tar format 

            helm pull --untar [NAME] [flags]        =>  This command pulls and untars a chart 