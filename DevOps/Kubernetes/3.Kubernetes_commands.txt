                                       _          _                          _               https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands
                                      | | ___   _| |__   ___ _ __ _ __   ___| |_ ___  ___ 
                                      | |/ / | | | '_ \ / _ \ '__| '_ \ / _ \ __/ _ \/ __|
                                      |   <| |_| | |_) |  __/ |  | | | |  __/ ||  __/\__ \
                                      |_|\_\\__,_|_.__/ \___|_|  |_| |_|\___|\__\___|____/                                                                                     

                                         ___    ___    _ __ ___    _ __ ___     __ _   _ __     __| |  ___ 
                                        / __|  / _ \  | '_ ` _ \  | '_ ` _ \   / _` | | '_ \   / _` | / __|
                                       | (__  | (_) | | | | | | | | | | | | | | (_| | | | | | | (_| | \__ \
                                        \___|  \___/  |_| |_| |_| |_| |_| |_|  \__,_| |_| |_|  \__,_| |___/
                                            


Basic structure of commands


        Most of the commands are in the form of:

*****************************************************************************************************************************************
										
                            kubectl     ACTION_TYPE     OBJ_TYPE    OBJ_NAME     OBJ_PARAMETER/FLAG

*****************************************************************************************************************************************

                                                                      _   
                                                             __ _  ___| |_ 
                                                            / _` |/ _ \ __|
                                                            | (_| |  __/ |_ 
                                                            \__, |\___|\__|
                                                            |___/          


                ACTION_TYPE    " get "         does'nt require obj_name as we only retriving info about that obj type
                                                but name can be passed to get info about specific named obj type 

                OBJ_TYPE    :

                                  all               

                                  pods   or   po

                                  ns      or     namespace

                                  Services             e.g.  kubectl get svc kube-dns -n kube-system

                                  deploy    or      deployment

                                  nodes 

                                  replicationcontroller

                                  rs         or        replicaset

                                  quota             get resource-quota

                                  persistantvolume    or  pv

                                  HorizontalPodAutoscaler  or  hpa

                        
                        e.g.      kubectl get pods    OR     
                        
                                  kubectl get pods,nodes         ---for getting 2 types info in single command


                OBJ_PARAMETER  / flags  :


                                    -o wide            get detailed info about that obj type and also IP if applicable

                                    --show-labels            get labels if assigned

                                    -l key=value            get only obj type resources having label key and value as value

                                    -l key!=value 

                                    -n NAME_OF_NAMESPACE        get objest inside that namespace , by default it is "default" NS

                                    --watch               see continous implementation of resource stage

                                    -o yaml         get desired yaml configured inside kubenetes   

                                    -o json           same as yaml but in json format

                Special feature :     selector

                        kubectl     get    OBJ_TYPE     'KEY in (value1,value2,value3)'    --- list the pods having key as value1 or value2 or value3

						also can be used with selector like notin and exist

                                                         _          
                             ___   _ __    ___    __ _  | |_    ___ 
                            / __| | '__|  / _ \  / _` | | __|  / _ \
                           | (__  | |    |  __/ | (_| | | |_  |  __/
                            \___| |_|     \___|  \__,_|  \__|  \___|
                                                                    

                ACTION_TYPE    " create "        create an object imperatively

                                            kubctl  create     OBJ_TYPE   OBJ_NAME     

                                                e.g       kubectl create pods 

                OBJ_TYPE    :

                                  pods

                                  ns 

                                  Services

                                  deploy                 =>   kubectl create deployment nginxdeploy --image=nginx

                                  nodes 

                                  replicationcontroller

                                  quota

                                  job   e.g kubectl create job nginxjob --image=busybox -- echo "hello"     OR  
                                            kubectl create cronjob nginxjob --image=busybox --schedule="*/1 * * * *" -- echo "hello"     CRON Job

                                                                            */1 * * * *  =>   every 1 minute


                OBJ_PARAMETER  / flags  :


                                --image=IMG_NAME            ------ image should be in registry of minikube docker

                                --namespace=NAME      -----create in that ns 

                                --hard=<resource-name>=<value>    # only for type quota





                                                               _   _   _   
                                                     ___    __| | (_) | |_ 
                                                    / _ \  / _` | | | | __|
                                                   |  __/ | (_| | | | | |_ 
                                                    \___|  \__,_| |_|  \__|
                                                                            


                ACTION_TYPE    " edit "       edit created configuration imperatively , 
                                            we get yaml implementation of object that we can edit it and then save it back to kubernetes

                                            kubctl  edit    OBJ_TYPE   OBJ_NAME     


                OBJ_TYPE    :

                                  deploy                 =>   kubectl edit deployment nginxdeploy 

 
                                                         _                 
                                                        | | ___   __ _ ___ 
                                                        | |/ _ \ / _` / __|
                                                        | | (_) | (_| \__ \
                                                        |_|\___/ \__, |___/
                                                                |___/     


                                     
                ACTION_TYPE    " logs"         debugging

                                            kubctl  logs  POD_NAME

                                                e.g       kubectl logs pod-afcbsib-afcbs



                OBJ_PARAMETER  / flags  :



 
                                                                                    _          
                                                 ___  __  __   ___    ___   _   _  | |_    ___ 
                                                / _ \ \ \/ /  / _ \  / __| | | | | | __|  / _ \
                                               |  __/  >  <  |  __/ | (__  | |_| | | |_  |  __/
                                                \___| /_/\_\  \___|  \___|  \__,_|  \__|  \___| 
                                                
                                                                                                



                                     
                ACTION_TYPE    " exec "        executing commands inside pod

                                            kubctl exec POD_NAME -it -- CMD

                                                e.g       kubectl exec testpod -it -- bin/bash                  single image pod
                                                e.g       kubectl exec testpod -it -c c00 -- bin/bash           multi container pod



                OBJ_PARAMETER  / flags  :


                                CMD       it will execute CMD in the pod POD_NAME   , e.g    kubctl  exec mypod -- touch ww.txt

                                -it          get directly in container cmd     , e.g.      kubctl  exec -it  mypod -- bin/bash

                                -c CONTAINER_NAME        get inside specific container bash 




                                                                 _       _          _ 
                                                                | | __ _| |__   ___| |
                                                                | |/ _` | '_ \ / _ \ |
                                                                | | (_| | |_) |  __/ |
                                                                |_|\__,_|_.__/ \___|_|
                                                                                    


                ACTION_TYPE    " label "         here we need to provide key-value pair if we are assigning labels

                                            kubctl  label     OBJ_TYPE   OBJ_NAME     KEY=VALUE

                                                e.g       kubectl label node node12 hardware=t2.medium

                OBJ_TYPE    :

                                  pods

                                  ns 

                                  Services

                                  deploy 

                                  nodes 

                                  replicationcontroller


                OBJ_PARAMETER  / flags  :

                                --overwrite          if key value pair already exist  e.g. (  kubectl label --overwrite pods podname status=unhealthy  )

                                --all                label all obj type at once     e.g.  ( kubectl label pods --all status=unhealthy  )

                                --resource-version=N     label obj type only if resource is unchanged from version  N  
                                                        e.g (   kubectl label pods foo status=unhealthy --resource-version=1  ) 
                                                                    -- Update pod 'foo' only if the resource is unchanged from version 1

    





    Update pod 'foo' by removing a label named 'bar' if it exists # Does not require the --overwrite flag

kubectl label pods foo bar-



                                        __                           _   _
                                     __| | ___   ___    ___   _ __  (_) | |__     ___ 
                                    / _` |/ _ \ / __|  / __| | '__| | | | '_ \   / _ \
                                   | (_| |  __/ \__ \ | (__  | |    | | | |_) | |  __/
                                    \__,_|\___| |___/  \___| |_|    |_| |_.__/   \___|
                                                                        



                ACTION_TYPE    " describe "         give detailed info

                                            kubctl  describe     OBJ_TYPE   OBJ_NAME  

                                                e.g       kubectl describe nodes minikube

                OBJ_TYPE    :

                                  pods

                                  ns 

                                  Services

                                  deploy 

                                  nodes 

                                  replicationcontroller


                OBJ_PARAMETER  / flags  :

                        | grep -A 5 TYPE    => get only those TYPE info 

                                e.g.  kubectl describe pods myapp-pod | grep -A 5 Conditions




                                  _          _          _          
                               __| |   ___  | |   ___  | |_    ___ 
                              / _` |  / _ \ | |  / _ \ | __|  / _ \
                             | (_| | |  __/ | | |  __/ | |_  |  __/
                              \__,_|  \___| |_|  \___|  \__|  \___|


                ACTION_TYPE    " delete "           delete the object resource

                OBJ_TYPE    :

                                  all               

                                  pods

                                  ns      or     namespace

                                  Services

                                  deploy    or      deployment

                                  nodes 

                                  replicationcontroller

                                  rs         or        replicaset

                        
                        e.g.      kubectl delete pods podname    OR       
                        
                               


                OBJ_PARAMETER  / flags  :

                        -f  delete all the objects created by the yaml/json file           e.g.  kuebctl delete -f mymanifest.yaml

                        -l       e.g     kubectl delete pod -l key=value           ---- delete all the pods having lable as key and it value is value


                                                                            _         
                                                     __ _   _ __    _ __   | |  _   _ 
                                                    / _` | | '_ \  | '_ \  | | | | | |
                                                   | (_| | | |_) | | |_) | | | | |_| |
                                                    \__,_| | .__/  | .__/  |_|  \__, |
                                                           |_|     |_|          |___/ 



                ACTION_TYPE    " apply "           apply the yaml or json file

         

                        
                        e.g.      kubectl apply -f manifest.yaml  
                        
                               


                OBJ_PARAMETER  / flags  :

                        -f          use a file to apply

                        --namespace=NAME      -----create in that ns    OR     -n NAMESPACE_NAME



                                                                              _        
                                                         ___    ___    __ _  | |   ___ 
                                                        / __|  / __|  / _` | | |  / _ \
                                                        \__ \ | (__  | (_| | | | |  __/
                                                        |___/  \___|  \__,_| |_|  \___|
                                                                                    



                ACTION_TYPE    " scale "        scale the rs manually 

                                            kubctl  scale     OBJ_TYPE   OBJ_NAME     

                                                e.g       kubectl scale --replicas=3 rs/foo                                 # Scale a replicaset named 'foo' to 3
                                            kubectl scale --replicas=3 -f foo.yaml                            # Scale a resource specified in "foo.yaml" to 3
                                            kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # If the deployment named mysql's current size is 2, scale mysql to 3
                                            kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # Scale multiple replication controllers

                OBJ_TYPE    :


                                  deploy                 =>  

                                  replicationcontroller


                OBJ_PARAMETER  / flags  :




                                        _              _____           ____                   _            
                                       / \     _   _  |_   _|   ___   / ___|    ___    __ _  | |       ___ 
                                      / _ \   | | | |   | |    / _ \  \___ \   / __|  / _` | | |      / _ \
                                     / ___ \  | |_| |   | |   | (_) |  ___) | | (__  | (_| | | |___  |  __/
                                    /_/   \_\  \__,_|   |_|    \___/  |____/   \___|  \__,_| |_____|  \___|
                                        

                Creates an autoscaler that automatically chooses and sets the number of pods that run in a Kubernetes cluster. 
                HPA (Horizontal Pod Autoscaler) is a Kubernetes component that allows you to automatically scale a resource to a desired number of pods.
                in manifest , HorizontalPodAutoscaler is used instead of autoscale


                ACTION_TYPE    " autoscale "        

                                            kubctl   autoscale    OBJ_TYPE   OBJ_NAME    FLAGS  

                                          

                OBJ_TYPE    :

                                  deployment     e.g. kubectl autoscale deployment foo --min=2 --max=10   ,  Auto scale a deployment "foo", with the number of pods between 2 and 10
                                  
                                  replica set   
                                  
                                  stateful set
                                  
                                  replication controller   e.g kubectl autoscale rc foo --max=5 --cpu-percent=80      ,  number of pods between 1 and 5, target CPU utilization at 80%


                OBJ_PARAMETER  / flags  :


                                --cpu-percent           target average CPU utilization , if avg CPU utilization exceeds set value , scale up

                                -f             use a file to apply

                                --min=MIN       minimum number of pods

                                --max=MAX       maximum number of pods


                                         _ __    _ __    ___   __  __  _   _ 
                                        | '_ \  | '__|  / _ \  \ \/ / | | | |
                                        | |_) | | |    | (_) |  >  <  | |_| |
                                        | .__/  |_|     \___/  /_/\_\  \__, |
                                        |_|                            |___/ 

                ACTION_TYPE    " proxy "        creates proxy server betnween localhost and API server  

                     ____                   _              __                                               _ 
                    |  _ \    ___    _ __  | |_           / _|   ___    _ __  __      __   __ _  _ __    __| |
                    | |_) |  / _ \  | '__| | __|  _____  | |_   / _ \  | '__| \ \ /\ / /  / _` || '__|  / _` |
                    |  __/  | (_) | | |    | |_  |_____| |  _| | (_) | | |     \ V  V /  | (_| || |    | (_| |
                    |_|      \___/  |_|     \__|         |_|    \___/  |_|      \_/\_/    \__,_||_|     \__,_|
                                                                                                


                ACTION_TYPE    " port-forward "        for testing pod  , without any service running , expose pod to world
            

                                    kubectl port-forward <obj-name> <locahost-port>:<pod-port>

                                    kubectl port-forward mydeployments-5cb7748875-v4qv4 5000:80    ---for pod

                                    kubectl port-forward deployment/mydeployments 5000:80           --- for whole deploy

                OBJ_TYPE    :

                                  pods

                                  deploy                  

                                  replicaset

                OBJ_PARAMETER  :

                                --address 0.0.0.0                    --  go to specifically 0.0.0.0:<pod-port>   




                                                        __   _         
                                 ___    ___    _ __    / _| (_)   __ _ 
                                / __|  / _ \  | '_ \  | |_  | |  / _` |
                               | (__  | (_) | | | | | |  _| | | | (_| |
                                \___|  \___/  |_| |_| |_|   |_|  \__, |
                                                                  |___/ 
                        
                        ACTION_TYPE    " config "   used to configure settings for kubectl        

                                            kubectl config set-cluster my-cluster --server=https://

                    config file is located in        ==>     ${HOME_DIR}/${USER}/.kube/config


                    set default namespace 

                        kubectl config set-context $(kubectl config current-context) --namespace=NEW_NAMESPAC_NAME

                    get default namespace name
                        
                        kubectl config view | grep namespace:

                    all the cluster that are configured

                            kubectl config get-contexts
                    
                    current cluster config is locating
                            
                            kubectl config current-context          # in our case minikube


                        
			A context element in a kubeconfig file is used to group access parameters under a convenient name. 
            Each context has three parameters: cluster, namespace, and user. 			
            By default, the kubectl command-line tool uses parameters from the current context to communicate with the cluster



                        config file contains cluster , user and context .

                                cluster = > https endpoints for cluster
                                user = >  credential to communicate to cluster
                                context = >   cluster + user





                                                 _____                 
                                                |_   _|   ___    _ __  
                                                  | |    / _ \  | '_ \ 
                                                  | |   | (_) | | |_) |
                                                  |_|    \___/  | .__/ 
                                                                |_|    
                                             


                     (table of processes) command shows a real-time view of running processes in Linux and displays kernel-managed tasks available in Linux

                     kubectl top command doesn’t actually collect any metrics itself. It queries the Metrics API for the metrics and presents them to you
                            You can check whether the Metrics API is installed by running the following command

                                    kubectl get pods --all-namespaces | grep metrics-server

                    If Not , then install using :

                                kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml



                ACTION_TYPE    " top "       get metrics of any object type

                                            kubectl top  OBJ_TYPE   OBJ_PARA    

                                                e.g       kubectl top pods                                 # Get metrics for all pods

                OBJ_TYPE    :

                                  pods

                                  Node

                OBJ_PARA    :

                                     --sort-by                  e.g     kubectl top pods --sort-by cpu
                                                    
                                                    kubectl top pods -A --sort-by=cpu | head -4 // it will show with headers, so need head -4.

 
                    
                     _____          ____            ____         
                    | ____| __  __ |  _ \    ___   / ___|    ___ 
                    |  _|   \ \/ / | |_) |  / _ \  \___ \   / _ \
                    | |___   >  <  |  __/  | (_) |  ___) | |  __/
                    |_____| /_/\_\ |_|      \___/  |____/   \___|
                                             



                           expose is used to quickly create k8s service for deploment

                           can be used also declaratively


                ACTION_TYPE    " expose "       

                                            kubectl expose OBJ_TYPE   OBJ_PARA    

                                                e.g       kubectl expose deploy nginx --type=NodePort --name=mys --port=8080 --target-port=80  
                                                    
                                                                            # expose a deployment named myd to a NodePort service named mys with mentioned specs

                OBJ_TYPE    :

                                  deployment


                                  service


                                  replica set 


                                  replication controller 


                                  pod               e.g. kubectl expose pod valid-pod --port=444 --name=frontend

                OBJ_PARA    :

                                    --type                 Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.

                                    -f               e.g.  kubectl expose -f nginx-controller.yaml --port=80 --target-port=80

                                    --port=P         Port of service to expose. 

                                    --target-port=P         Port in the container to expose.
	

			
                            _                              _____           _____        
                           / \     _ __    _ __     ___   |_   _|   __ _  |_   _|   ___ 
                          / _ \   | '_ \  | '_ \   / _ \    | |    / _` |   | |    / _ \
                         / ___ \  | | | | | | | | | (_) |   | |   | (_| |   | |   |  __/
                        /_/   \_\ |_| |_| |_| |_|  \___/    |_|    \__,_|   |_|    \___|
                                                                                        
  

                           All Kubernetes objects support the ability to store additional data with the object as annotations. 
                           Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON.

                           Attempting to set an annotation that already exists will fail unless --overwrite is set. 
                           If --resource-version is specified and does not match the current resource version on the server the command will fail.

                          
                ACTION_TYPE    " annotate "       

                                            kubectl annotate   OBJ_TYPE    OBJ_NAME    KEY=VALUE   OBJ_PARA    

                                                e.g       kubectl annotate pods mypod description='my frontend running nginx'

                                                                # annotate pod named mypod with description as value

                OBJ_TYPE    :

            
                                  pod               e.g. kubectl annotate pods --all description='my frontend running nginx'

                OBJ_PARA    :
 
                                --all             Select all resources, in the namespace of the specified resource types    

                                -f              files identifying the resource to update the annotation
                                                            e.g.  kubectl annotate -f pod.json description='my frontend'
                                                                        annotate all pods created by this file

                                --overwrite           If true, allow annotations to be overwritten, otherwise reject annotation updates 






                                             _              _____   _   _ 
                                            / \     _   _  |_   _| | | | |
                                           / _ \   | | | |   | |   | |_| |
                                          / ___ \  | |_| |   | |   |  _  |
                                         /_/   \_\  \__,_|   |_|   |_| |_|
                                                        

                                Inspect authorization


                                                      ____   ____  
                                                     / ___| |  _ \ 
                                                    | |     | |_) |
                                                    | |___  |  __/ 
                                                     \____| |_|    
                                                                

                                Copy files and directories to and from containers

                                kubectl cp <file-spec-src> <file-spec-dest>


                                             ____    _   _____   _____ 
                                            |  _ \  (_) |  ___| |  ___|
                                            | | | | | | | |_    | |_   
                                            | |_| | | | |  _|   |  _|  
                                            |____/  |_| |_|     |_|    
                                                                    

                                Diff configurations specified by file name or stdin between the current online configuration, and the configuration as it would be if applied.

                                The output is always YAML.

                                kubectl diff -f FILENAME

                                         ____            _____          _   _ 
                                        |  _ \    __ _  |_   _|   ___  | | | |
                                        | |_) |  / _` |   | |    / __| | |_| |
                                        |  __/  | (_| |   | |   | (__  |  _  |
                                        |_|      \__,_|   |_|    \___| |_| |_|
                                                        

                                Update fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.

                                JSON and YAML formats are accepted



                                kubectl patch (-f FILENAME | TYPE NAME) -p PATCH_STRING

                                Flags :

                                    -f           kubectl patch -f FILENAME -p PATCH_STRING
                                                            e.g. kubectl patch -f pod.yaml -p '{"spec":{"containers":[{"name":"nginx","image":"nginx:1.7.9"}]}}'

                                OBJ_TYPE :

                                        pods        e.g.   kubectl patch pods mypod -p '{"spec":{"containers":[{"name":"nginx","image":"nginx:1.7.9"}]}}'

                                        deploy      e.g.   kubectl patch deploy mydeploy -p '{"spec":{"template":{"spec":{"containers":[{"image":"nginx:1.7.9"}]}}}}'

                                        node      e.g.  kubectl patch node mynode -p '{"spec":{"unschedulable":true}}'   # node name is mynode

                                                Marking a node as unschedulable prevents the scheduler from placing new pods onto that Node 
                                                but does not affect existing Pods on the Node. 
                                                This is useful as a preparatory step before a node reboot or other maintenance.
                            


                                         ____    _   _   _   _ 
                                        |  _ \  | | | | | \ | |
                                        | |_) | | | | | |  \| |
                                        |  _ <  | |_| | | |\  |
                                        |_| \_\  \___/  |_| \_|
                                                            

                                    Create and run a particular image in a pod.

                                    kubectl run NAME --image=image         # launch pod with NAME and image as image

                                    Flags :

                                        --image                         image to run , e.g.   kubectl run nginx --image=nginx

                                        -f                             file containing the pod definition

                                        --port                          port to expose , e.g.   kubectl run nginx --image=nginx --port=80

                                        --env                            set env    e.g.  --env="DNS_DOMAIN=cluster"

                                        --label                             set label  e.g.  --label="app=myapp"

                                        -it                           Keep stdin open on the container in the pod, even if nothing is attached

                                        busybox                   interactively debug service (it combines many common UNIX utilities into small file)
                                                                e.g.   kubectl run -i -t busybox --image=busybox --restart=Never
                                                                 OR     kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

                                        sh                    run a shell inside the container

                                        --rm                          remove the container when the pod is deleted

                                        --dry-run                     Dry run; print the corresponding API objects without creating them
                                                                        Must be "none", "server", or "client". 
                                                                        If client strategy, only print the object that would be sent, withoutsending it. 
                                                                        If server strategy, submit server-side request without persisting the resource
                                                                         e.g.   kubectl run nginx --image=nginx --dry-run=Client
                                        
                                        --overrides                   Overrides the kubectl binary used to run the container
                                                                e.g.   kubectl run nginx --image=nginx--overrides='{ "apiVersion": "v1"}'
                                         



                                             _  __                _____           __  __   _         _____ 
                                            | |/ /  _   _   ___  |_   _|   ___   |  \/  | (_)  ____ | ____|
                                            | ' /  | | | | / __|   | |    / _ \  | |\/| | | | |_  / |  _|  
                                            | . \  | |_| | \__ \   | |   | (_) | | |  | | | |  / /  | |___ 
                                            |_|\_\  \__,_| |___/   |_|    \___/  |_|  |_| |_| /___| |_____|
                                                        

                            more flexible when writing k8s configuration files by allowing to override patch configuration , Alternative to HELM

                            built in with kubectl


                                         ____            _       _                       _____ 
                                        |  _ \    ___   | |     | |       ___    _   _  |_   _|
                                        | |_) |  / _ \  | |     | |      / _ \  | | | |   | |  
                                        |  _ <  | (_) | | |___  | |___  | (_) | | |_| |   | |  
                                        |_| \_\  \___/  |_____| |_____|  \___/   \__,_|   |_|  
                                                                                            


                    In order to rollout back to previous specific version we use :

                            kubectl rollout status deployment <deployment-name>   # get status 

                    rollback to previous version :
                    
                            kubctl rollout undo deployment <deployment-name> --to-revision=<revision-number>          -- get rivision number using history commnd

                    To see the rollout history of a deployment we use :

                            kubectl rollout history deployment <deployment-name>


                                             _____   ____    _   _____ 
                                            | ____| |  _ \  (_) |_   _|
                                            |  _|   | | | | | |   | |  
                                            | |___  | |_| | | |   | |  
                                            |_____| |____/  |_|   |_|  
                                            



                                         ____           _____ 
                                        / ___|    ___  |_   _|
                                        \___ \   / _ \   | |  
                                         ___) | |  __/   | |  
                                        |____/   \___|   |_|  
                                            
                                                                



kubectl api-resources
kubectl cluster-info



