Every minifest has 3 main parts

  1. metadata 
  2. specification
  3. status               , with every apply status get updated based on spec , done by kubernetes after apply 


There are 3 types of selectors -
  1. Label Selector  - like      env- test
  2. Field Selector   - selects based on the oject data like Metadata , Status
  3. Node Selector   -  selects node for pod placement

Annotations  -  allows to attach arbitrary non-identifying metadata to an object (ingress requires this)


---         # init

# ---------------                 Pod                       ------------------------------------


apiVersion: v1 
kind: Pod
metadata: 
  name: pod1
  labels:            # Label Selector 
    app: app1
    test: test
    name: testpod4
spec: 
  containers:               #  for multicontainer pod
    - name: c00
      image: httpd
    - name: ubuntu
      image: ubuntu
  imagePullPolicy: never     # use local docker registry only , if image not found , dont dowmload from server

#     ----  Using resource quota ----
---
apiVersion: v1
kind: Pod
metadata: 
  name: pod1
  labels: 
    app: app1
    test: test
    name: testpod4
spec:
  containers:
  - name: resource
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo junkJunk; sleep 5 ; done"]
    resources:                                          
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"


#     ----  Using Init pod ----
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:               
    - name: c01
      image: ubuntu
      command: ['bin/bash', '-c', 'echo The app is running! && sleep 100']
  initContainers:     # this is for init container , it will run before main container
    - name: c00
      image: ubuntu
      command: ['bin/bash', '-c', 'echo The app is running! && sleep 100']
 

# ---------------                 Replicaset                      ------------------------------------

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: test-rs
  labels:
    app: testapp-from-rs
spec:
  replicas: 1
  selector:       # Required Field 
    matchLabels:    # Required Field 
      tier: fro             # should be matched with template -> metadata -> labels -> key -> value
  template:
    metadata:
      labels:         # Required Field 
        tier: fro
    spec:
      containers:
      - name: ubu
        image: ubuntu
        command: ["/bin/bash", "-c", "while true; do echo echokadcbk ; sleep 10 ; done"]


# ##     Using Operators 

---
apiVersion: apps/v1                           
kind: ReplicaSet                                    
metadata:
  name: myrs
spec:
  replicas: 2  
  selector:                         # Required Field 
    matchExpressions:                             # these must match the labels , it only can have format like key , operator , values  . other than that not allowed
      - {key: myname, operator: In, values: [testubunuturs]}
      - {key: env, operator: NotIn, values: [production]}
   
  template:      
    metadata:             # Required Field 
      name: testrs
      labels:                     # Required Field   , labels key should be matched with selector      
        myname: testubunuturs
    spec:                       # Required Field  , spec -> spec -> conatainers 
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo echokadcbk ; sleep 10 ; done"]



# ---------------               Deployment                     ------------------------------------

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80





# ---------------               Services                     ------------------------------------

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-app
  # type: LoadBalancer      # if service needs external ip
  ports:
    - protocol: TCP
      port: 80         #    listining  on 80 from usrs
      targetPort: 8080       # directing request to port 8080 of the pods having opend 8080



# ---------------                NameSpace                     ------------------------------------

#  creating namespcae named dev

---
apiVersion: v1
kind: Namespace
metadata:
   name: dev
   labels:
     name: dev

# ---------------              Resource Quota                     ------------------------------------

---
apiVersion: v1
kind: ResourceQuota
metadata:
   name: myquota
spec:
  hard:
    limits.cpu: "400m"
    limits.memory: "400Mi"
    requests.cpu: "200m"
    requests.memory: "200Mi"

  #       
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: object-counts
spec:
  hard:
    configmaps: "10" 
    persistentvolumeclaims: "4" 
    replicationcontrollers: "20" 
    secrets: "10" 
    services: "10"

#      -- define max resources 

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: res-counts
spec:
  hard:
    pods: "2"      # max 2 pods can be created in this namespace
status:
  hard:
    pods: "2"
  used:
    pods: "0"

# ---------------                 Limit Range                     ------------------------------------
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-limit-range
spec:
  limits:
  - default:         #   default limit , if max is not set it will get this value
      cpu: 1
    defaultRequest:    # default request 
      cpu: 0.5
    type: Container

#        With Max  and min config

---
apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 
spec:
  limits:
    -
      type: "Pod"
      max:
        cpu: "2" 
        memory: "1Gi" 
      min:
        cpu: "200m" 
        memory: "6Mi" 
    -
      type: "Container"
      max:
        cpu: "2" 
        memory: "1Gi" 
      min:
        cpu: "100m" 
        memory: "4Mi" 
      default:
        cpu: "300m" 
        memory: "200Mi" 
      defaultRequest:
        cpu: "200m" 
        memory: "100Mi" 
      maxLimitRequestRatio:
        cpu: "10" 
# ---------------                Job                    ------------------------------------

---
apiVersion: batch/v1
kind: Job
metadata:
  name: testjob
spec:
  template:
    metadata:
      name: testjob
    spec:
      containers:
      - name: counter
        image: centos:7
        command: ["bin/bash", "-c", "echo something; sleep 5"]
      restartPolicy: Never
#        --------------    parallelism
---
apiVersion: batch/v1
kind: Job
metadata:
  name: testjob
spec:
  parallelism: 5                           # Runs for pods in parallel
  activeDeadlineSeconds: 10  # Timesout after 30 sec , all the mentioned pods will be terminated after 20sec and deleted after 
                                      # 20 +10 = 30 sec 
  template:
    metadata:
      name: testjob
    spec:
      containers:
      - name: counter
        image: centos:7
        command: ["bin/bash", "-c", "echo something; sleep 20"]
      restartPolicy: Never





# ---------------             Cron   Job                    ------------------------------------

# A cron job is simply a command, program, or shell script that is scheduled to run periodically. 
# For example, a program that automatically executes log rotation must be run from time to time 
#  * * * * *  command to execute
#  ┬ ┬ ┬ ┬ ┬
#  │ │ │ │ │
#  │ │ │ │ │
#  │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)
#  │ │ │ └────────── month (1 - 12)
#  │ │ └─────────────── day of month (1 - 31)
#  │ └──────────────────── hour (0 - 23)
#  └───────────────────────── min (0 - 59)


---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
 name: sender
spec:
 schedule: "*/15 * * * *"
 jobTemplate:
   spec:
     template:
       spec:
         containers:
         - image: ubuntu
           name: sender
           command: ["bash","-c","echo 'Sending information to API/database'"]
         restartPolicy: OnFailure

#  above line will run every 15 sec and new pod will be created for every 15 sec , after completing the pod will be terminated and deleted
