

				***************************************************************************************************
									Kubernetes configmap  , Volume , secrets														***************************************************************************************************

		In programming, we use env files or separate configuration files to store settings, configurations, or variables that are required to execute the program. In Kubernetes, we 		can use ConfigMaps to achieve the same functionality.
		A ConfigMap is a Kubernetes API object that can be used to store data as key-value pairs. Kubernetes pods can use the created ConfigMaps as a:

				Configuration file
				Environment variable
				Command-line argument

		ConfigMaps provides the ability to make applications portable by decoupling environment-specific configurations from the containers.

			* Importantly, ConfigMaps are not suitable for storing confidential data. They do not provide any kind of encryption, and all the data in them are
					 visible to anyone who has access to the file. (Kubernetes provides secrets that can be used to store sensitive information.)



		//** Setup cocnfigmap using yaml file


							* file can be of any format 
					-----------------------------------------------------------------------------------------------

				     	kubectl create configmap MAP_NAME --from-file ./PATH/TO/FILE/file_name.yml    
      	
					-----------------------------------------------------------------------------------------------

					it will create configmap named as MAP_NAME


				get list of configmaps available 

					---------------------------------------------------------------------------
					|                	kubectl get configmaps				  |
					---------------------------------------------------------------------------
										kubectl describe configmaps MAP_NAME  --to get properties in details about map_name

				view specific configmaps  

					---------------------------------------------------------------------------
					|                kubectl get configmaps MAP_NAME -o yaml		  |    output map as yaml file
					---------------------------------------------------------------------------


		//** Mount configmap to pods using manifest

			 containers:
  				- name: container-configmap
      				  image: nginx:1.7.9
 	
      				  volumeMounts:
		
				# ----------  Using directly attached Volume  ---------# 
       					 - name: example-configmap-volume1
            				  mountPath: /etc/config   

				# ----------  Using configmap  ---------# 
       					 - name: example-configmap-volume2
            				  configMap:
						name: MAP_NAME     # from   kubectl get configmaps	 

				# ----------  Using secreat  ---------# 


				volumes:
      				 - name: secret-volume
        			  secret:       # treats like secreat only 
          			    secretName: mysecret            # mysecreat is a name like configmap
      				 - name: config-volume
        			    configMap:
          			      name: example-config #name of our configmap object



		//** secreats using cli
	
				kubectl apply -f /path/screats/secreat.yaml            ----using apply method , also configmap can be created this way just changing file and dir name
												(also kubectl create secreat command can be used like configmap )

				get list of secreats available 

					---------------------------------------------------------------------------
					|                	kubectl get secreats				  |
					---------------------------------------------------------------------------

		


				***************************************************************************************************
									Kubernetes replica and load-balancing														
				***************************************************************************************************


		there will be always at least replica no of pods will be in created/stared state 

		it can not be created using kind : pod , it requires kind Deployment or ReplicationController 


			sacle up/down ReplicationController using 

					kubctl scale --replicas=10 rc -l key=value     ---- key should be from only spec -> selector of that ReplicationController


					to delete ReplicationController or any object deployment use 

					kubectl delete -f FILENAME.yaml   --- it will not delete file physically only resource will be terminated from kubectl

















	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------



	7. e.g
					---------------------------------------------------------------------------
					|                			  |
					---------------------------------------------------------------------------









